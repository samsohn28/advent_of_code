exit
calculate(tree_line[x + 1..], height)
exit
height
(eval h) < height
h < height
n
eval h
n
eval h
n
eval h
n
eval h
n
eval h
next_highest
n
eval h
n
eval h
next_highest
n
next_highest
height
eval h
h
s
n
tree_line
c
tree_line
exit
calculate(tree_line[x + 1..], height)
calculate(tree_line[...x].reverse, height)
tree_line[...x]
s
scenic_score(grid[y], x, height)
n
s
exit
0.zero?
scenic_score(grid[y], x, height)
grid[y]
n
grid[y]
coordinates
s
exit
grid.map { |y| y[x] }
grid.map { |x| x[y] }
is_visible?(grid.map { |x| x[y] }, y, height)
is_visible?(grid[y], x, height)
x
y
n
s
process_tree([y, x], grid[y][x])
x
c
s
[y, x]
grid[y][x]
y
x
process_tree([y, x], grid[y][x])
c
x
y
process_tree([y, x], grid[y][x])
n
process_tree([y, x], grid[y][x])
n
process_tree([y, x], grid[y][x])
exit
n
process_tree([y, x], grid[y][x])
x
n
height
tree
h
tree_line[...tree].all? { |h| h < height } || tree_line[tree + 1..].all? { |h| h < height }
tree_line[...tree].all? { |h| h < height } ||
   46:         tree_line[tree + 1..].all? { |h| h < height }
tree_line
exit
tree_line[tree + 1..].any? { |h| h >= height}
tree_line[...tree].any? { |h| h >= height}
tree_line[...tree]
height
tree
tree_line
s
n
exit
height
s
n
exit
height
tree
tree_line
s
n
coordinates
exit
Day8::TreeGrid.new
